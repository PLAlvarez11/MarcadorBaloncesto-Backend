// <auto-generated />
using System;
using Marcador.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Marcador.Infrastructure.Migrations
{
    [DbContext(typeof(MarcadorDbContext))]
    partial class MarcadorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Marcador.Domain.Entities.Acceso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreAcceso")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("UsuarioCreacionId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEdicionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NombreAcceso")
                        .IsUnique();

                    b.ToTable("Accesos", (string)null);
                });

            modelBuilder.Entity("Marcador.Domain.Entities.Equipo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UsuarioCreacionId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEdicionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Equipos", (string)null);
                });

            modelBuilder.Entity("Marcador.Domain.Entities.EstadisticaJugadorPartido", b =>
                {
                    b.Property<int>("PartidoId")
                        .HasColumnType("int");

                    b.Property<int>("JugadorId")
                        .HasColumnType("int");

                    b.Property<int>("Asistencias")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Faltas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Puntos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("RebotesDef")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("RebotesOf")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Robos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Tapones")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("PartidoId", "JugadorId");

                    b.HasIndex("JugadorId");

                    b.ToTable("EstadisticaJugadorPartido", (string)null);
                });

            modelBuilder.Entity("Marcador.Domain.Entities.Jugador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Dorsal")
                        .HasColumnType("int");

                    b.Property<int>("Edad")
                        .HasColumnType("int");

                    b.Property<int>("EquipoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Estatura")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nacionalidad")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Posicion")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioCreacionId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEdicionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipoId");

                    b.ToTable("Jugadores", (string)null);
                });

            modelBuilder.Entity("Marcador.Domain.Entities.Logo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EquipoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("UsuarioCreacionId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEdicionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipoId")
                        .IsUnique();

                    b.ToTable("Logos", (string)null);
                });

            modelBuilder.Entity("Marcador.Domain.Entities.Partido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CuartoActual")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("Equipo1Id")
                        .HasColumnType("int");

                    b.Property<int>("Equipo2Id")
                        .HasColumnType("int");

                    b.Property<int>("FaltasEquipo1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("FaltasEquipo2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaPartido")
                        .HasColumnType("datetime2");

                    b.Property<int>("PuntajeEquipo1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("PuntajeEquipo2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("Terminado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("UsuarioCreacionId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEdicionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Equipo1Id");

                    b.HasIndex("Equipo2Id");

                    b.HasIndex("FechaPartido");

                    b.ToTable("Partidos", (string)null);
                });

            modelBuilder.Entity("Marcador.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expira")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Revocado")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("UsuarioCreacionId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEdicionId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("Marcador.Domain.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("UsuarioCreacionId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEdicionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Marcador.Domain.Entities.RolAcceso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccesoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioCreacionId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEdicionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccesoId");

                    b.HasIndex("RolId", "AccesoId")
                        .IsUnique();

                    b.ToTable("RolAccesos", (string)null);
                });

            modelBuilder.Entity("Marcador.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioCreacionId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEdicionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NombreUsuario")
                        .IsUnique();

                    b.HasIndex("RolId");

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("Marcador.Domain.Entities.EstadisticaJugadorPartido", b =>
                {
                    b.HasOne("Marcador.Domain.Entities.Jugador", "Jugador")
                        .WithMany()
                        .HasForeignKey("JugadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Marcador.Domain.Entities.Partido", "Partido")
                        .WithMany()
                        .HasForeignKey("PartidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jugador");

                    b.Navigation("Partido");
                });

            modelBuilder.Entity("Marcador.Domain.Entities.Jugador", b =>
                {
                    b.HasOne("Marcador.Domain.Entities.Equipo", "Equipo")
                        .WithMany("Jugadores")
                        .HasForeignKey("EquipoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipo");
                });

            modelBuilder.Entity("Marcador.Domain.Entities.Logo", b =>
                {
                    b.HasOne("Marcador.Domain.Entities.Equipo", "Equipo")
                        .WithOne("Logo")
                        .HasForeignKey("Marcador.Domain.Entities.Logo", "EquipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipo");
                });

            modelBuilder.Entity("Marcador.Domain.Entities.Partido", b =>
                {
                    b.HasOne("Marcador.Domain.Entities.Equipo", "Equipo1")
                        .WithMany("PartidosComoLocal")
                        .HasForeignKey("Equipo1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Marcador.Domain.Entities.Equipo", "Equipo2")
                        .WithMany("PartidosComoVisitante")
                        .HasForeignKey("Equipo2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipo1");

                    b.Navigation("Equipo2");
                });

            modelBuilder.Entity("Marcador.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Marcador.Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Marcador.Domain.Entities.RolAcceso", b =>
                {
                    b.HasOne("Marcador.Domain.Entities.Acceso", "Acceso")
                        .WithMany("RolAccesos")
                        .HasForeignKey("AccesoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Marcador.Domain.Entities.Rol", "Rol")
                        .WithMany("RolAccesos")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Acceso");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Marcador.Domain.Entities.Usuario", b =>
                {
                    b.HasOne("Marcador.Domain.Entities.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Marcador.Domain.Entities.Acceso", b =>
                {
                    b.Navigation("RolAccesos");
                });

            modelBuilder.Entity("Marcador.Domain.Entities.Equipo", b =>
                {
                    b.Navigation("Jugadores");

                    b.Navigation("Logo");

                    b.Navigation("PartidosComoLocal");

                    b.Navigation("PartidosComoVisitante");
                });

            modelBuilder.Entity("Marcador.Domain.Entities.Rol", b =>
                {
                    b.Navigation("RolAccesos");

                    b.Navigation("Usuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
